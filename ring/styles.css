/* 
  CSS 3D Transform Notes:
  - Coordinate System: 
    +X : right, +Y : down, +Z : toward the viewer (out of screen).
  - Transform order: right to left (e.g., rotateX(180deg) translateZ(40px) 
    rotates first, then translates).
  - Positive rotation is clockwise when looking along the axis toward the origin.
    (e.g., rotateY(90deg) spins the object to reveal its left side).
  - CSS uses a left-handed coordinate system.
    If X × Y = Z, and Z points into the screen, it's a right-handed system (like OpenGL, Unity).
    If X × Y = Z, and Z points out of the screen, it is a left-handed system.
*/


#returnBtn {
  position: fixed;
  top: 20px;
  left: 20px;
  padding: 0.8em 1.2em;
  font-size: 1em;
  background-color: #302c2c;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  z-index: 999; /* make sure it's above other content */
  transition: background-color 0.3s ease;
  pointer-events: auto; 
}

:root {
    --box_width: 260px;
    --box_height: 400px;
    --box_length: 80px;
    --box_perspective: 1000px;
  }
  
  /* 3D Ring Setup */
  #scene {
    width: 100vw;
    height: 100vh;
    perspective: var(--box_perspective);
    display: flex;
    align-items: center;
    justify-content: center;
    background: #111;
    overflow: hidden;
  }
  
  #ring {
    transform-style: preserve-3d;
    animation: spin 20s linear infinite;
  }

  #camera {
    transform-style: preserve-3d;
    transition: transform 0.1s ease-out;
  }
  
  @keyframes spin {
    from { transform: rotateY(0deg); }
    to { transform: rotateY(360deg); }
  }
  
  .box {
    position: absolute;
    width: var(--box_width);
    height: var(--box_height);
    transform-style: preserve-3d;
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .box.zoomed {
    transform: translateZ(1000px) scale(1.2) !important;
    z-index: 999;
    transition: transform 0.5s ease;
  }
  
  /* Position each box in the ring */
  /* #box1 { transform: rotateY(0deg)   translateZ(500px); } */
  /* #box2 { transform: rotateY(90deg)  translateZ(500px); }
  #box3 { transform: rotateY(180deg) translateZ(500px); }
  #box4 { transform: rotateY(270deg) translateZ(500px); } */
  
  /* Box Faces */
  .box figure {
    position: absolute;
    margin: 0;
    box-shadow: 0 0 20px rgba(0, 0, 0, .9) inset;
  }
  
  .box .front,
  .box .back {
    width: var(--box_width);
    height: var(--box_height);
  }
  
  .box .left,
  .box .right {
    width: var(--box_length);
    height: var(--box_height);
    left: calc((var(--box_width) - var(--box_length)) / 2);
    filter: brightness(80%);
  }
  
  .box .top,
  .box .bottom {
    width: var(--box_width);
    height: var(--box_length);
    top: calc((var(--box_height) - var(--box_length)) / 2);
    background: #ffd54f;
  }
  
  /* Transform each face */
  .box .front  { transform: rotateY(0deg)   translateZ(calc(var(--box_length) / 2)); }
  .box .back   { transform: rotateY(180deg) translateZ(calc(var(--box_length) / 2)) scaleX(-1) scaleY(-1); }
  .box .left   { transform: rotateY(-90deg) translateZ(calc(var(--box_width) / 2)); }
  .box .right  { transform: rotateY(90deg)  translateZ(calc(var(--box_width) / 2)); }
  .box .top    { transform: rotateX(90deg)  translateZ(calc(var(--box_height) / 2)); }
  .box .bottom { transform: rotateX(-90deg) translateZ(calc(var(--box_height) / 2)); }
  
  .box img {
    display: block;
    width: 100%;
    height: 100%;
  }
  
  /* Base styles */
  html, body {
    margin: 0;
    padding: 0;
    height: 100%;
  }
  
  body {
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #212121;
    font-family: sans-serif;
  }
  




  body {
    cursor: grab;
  }
  
  body:active {
    cursor: grabbing;
  }